SELECT DISTINCT EMP.DEPTNO,DEPT.LOC
FROM EMP, DEPT;

SELECT DISTINCT DEPTNO
FROM EMP

SELECT DEPTNO,ENAME
FROM EMP
ORDER BY ENAME;

SELECT *
FROM EMP
WHERE SAL > 1000 AND DEPTNO = 20;

SELECT DEPTNO,JOB, AVG(SAL)
FROM EMP
GROUP BY DEPTNO,JOB
HAVING AVG(SAL) <= 3000
ORDER BY DEPTNO;

SELECT *
FROM EMP;

SELECT *
FROM DEPT;

/*****부서 번호가 20이거나 직업이 SALESMAN인 사원 정보 출력 ****/

SELECT *
FROM EMP
WHERE DEPTNO = 20 OR JOB = 'SALESMAN';

/****직업이 'MANAGER', 'SALESMAN', 'CLERK' 들이 아닌 사원 정보 출력 ****/

SELECT *
FROM EMP
-- WHERE JOB !='MANAGER' AND JOB !='SALESMAN' AND JOB !='CLERK';
WHERE NOT(JOB ='MANAGER' OR JOB ='SALESMAN' OR JOB ='CLERK');

/****직업에 'A'가 들어간 사원정보 출력 ****/

SELECT *
FROM EMP
WHERE JOB LIKE '%A%';

/****추가수당이 없는 사원 정보 출력****/
SELECT *
FROM EMP
WHERE COMM IS NULL OR COMM = 0;

/****지역이 NEW YORK이고 'SALESMAN'인 사원 정보 출력 ****/

SELECT *
FROM EMP,DEPT
WHERE LOC = 'NEW YORK' AND JOB = 'SALESMAN';


/**총 수입 월급*12 + 추가수당 **/
/****연간 총 수입이 30000 이상인 사원의 이름을 출력해보기****/
SELECT ENAME
FROM EMP
WHERE SAL*12 + COMM >= 30000 OR SAL*12 >= 30000;

/**연간 총 수입 출력해줄 열을 생성해서 총 수입 TOTAL_SALARY출력 (SAL:월급)**/

SELECT SAL*12+COMM AS TOTAL_SALARY
FROM EMP;

--NVL(NULL VALUE) -> NVL(값, 대체값)
SELECT SAL*12+NVL(COMM,0) AS TOTAL_SALARY
FROM EMP;

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO=20 AND SAL>=2000
UNION
SELECT EMPNO, ENAME, JOB, SAL,DEPTNO
FROM EMP 
WHERE DEPTNO=30 AND SAL>=2000;

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO=20 AND SAL>=2000
UNION ALL
SELECT EMPNO, ENAME, JOB, SAL,DEPTNO
FROM EMP 
WHERE DEPTNO=20 AND SAL>=2000;

-- 사원 이름이 5글자 이상인 애들 출력
SELECT ENAME
FROM EMP
WHERE LENGTH(ENAME) >= 5;

-- JOB을 3글자까지만 출력
SELECT SUBSTR(JOB,1,3)
FROM EMP;


/*SELECT length(JOB), LPAD(JOB,10,'#')
FROM EMP; */

-- A가 들어간 직업 % 안쓰고 출력

SELECT *
FROM EMP
WHERE INSTR(JOB, 'A' ,1) > 0;

SELECT CONCAT('HELLO', 'WORLD') FROM DUAL;

SELECT LENGTH('HELLO') FROM DUAL;

SELECT LOWER('HELLO') FROM DUAL;

SELECT UPPER('hello') FROM DUAL;

SELECT UPPER('hello') FROM DUAL;

SELECT SUBSTR('HELLO, WORLD', 1, 5) FROM DUAL;

SELECT INSTR('HELLO,WORLD', 'O',1,2) FROM DUAL;

SELECT REPLACE('HELLO, WORLD', 'WORLD', 'world') FROM DUAL;

SELECT TRIM(BOTH 'H' FROM 'HELLO WORLD HH') FROM DUAL;

SELECT TRIM(BOTH 'O' FROM 'HELLO WORLD HH') FROM DUAL;

SELECT SYSDATE FROM DUAL;

SELECT EXTRACT(YEAR from HIREDATE) FROM EMP; 

SELECT TO_DATE('2020/01/01','YYYY/MM/DD') FROM DUAL; 

SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD') FROM DUAL; 

-- 직원들 입사 40주년이 언젠지 출력

SELECT EXTRACT(YEAR from HIREDATE) + 40
FROM EMP;

SELECT ADD_MONTHS(HIREDATE, 480)
FROM EMP;


-- 입사한지 42년차 되신 분들 출력

SELECT *
FROM EMP
WHERE EXTRACT(YEAR from HIREDATE) + 42 <= EXTRACT(YEAR from SYSDATE); 

SELECT *
FROM EMP
WHERE FLOOR(MONTHS_BETWEEN(SYSDATE, HIREDATE)) > 42*12;

SELECT *
FROM EMP
WHERE TO_CHAR(SYSDATE,'YYYY') = TO_CHAR(ADD_MONTHS(HIREDATE,'YYYY'), 42*12);



SELECT COALESCE('APPLE','BANANA','APFPLE','APPLE') FROM DUAL;

SELECT COALESCE(NULL,NULL,NULL,NULL) FROM DUAL;

SELECT COALESCE(NULL,NULL,'APPLE') FROM DUAL;

SELECT EMPNO, ENAME, JOB, SAL, DECODE(JOB, 'MANAGER', SAL*1.1, 'SALESMAN',SAL*1.05,'ANALYST', SAL*1.3,SAL) AS NEW_SAL
FROM EMP;                                                                             

-- 추가 수당 '해당 사항 없음', '해당 사항 있음'

SELECT ENAME, JOB, SAL, NVL2(COMM, '해당 사항 있음', '해당 사항 없음') AS COMM
FROM EMP;


-- MANAGER 급여 합계

SELECT SUM(SAL)
FROM EMP
WHERE JOB ='MANAGER';

-- 30번 부서 인원 수

SELECT COUNT(*)
FROM EMP
WHERE DEPTNO = 30;

-- 제일 오래된 인원과 입사동기들 (같은 해 입사) 출력
SELECT MIN(EXTRACT(YEAR FROM HIREDATE)) 
FROM EMP;

SELECT *
FROM EMP
WHERE EXTRACT(YEAR FROM HIREDATE) = (SELECT MIN(EXTRACT(YEAR FROM HIREDATE)) FROM EMP);

-- 같은 직업이 3명인 JOB을 출력
SELECT JOB, COUNT(*) 
FROM EMP
GROUP BY JOB
HAVING COUNT(*) >= 3;


-- GROUP BY
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY (DEPTNO, JOB);

-- ROLLUP
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);

--CUBE
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB);

-- GROUPING SETS
SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY GROUPING SETS((DEPTNO, JOB),(DEPTNO),(JOB),());

SELECT DEPTNO, JOB, SUM(SAL)
FROM EMP
GROUP BY GROUPING SETS((DEPTNO),(JOB));

-- GROUPING
SELECT DEPTNO, JOB, COUNT(*), SUM(SAL), GROUPING(DEPTNO),GROUPING(JOB)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB);


SELECT *
FROM EMP;

SELECT *
FROM DEPT;

-- 추가 수당 '해당 사항 없음', '추가 수당 없음', '추가 수당 xx'

SELECT ENAME, COMM,
CASE
WHEN COMM IS NULL THEN '해당사항 없음'
WHEN COMM = 0 THEN '수당 없음'
ELSE CONCAT('추가수당:' , TO_CHAR(COMM))
END AS NEW_COMM,ENAME
FROM EMP;

SELECT EMPNO, ENAME,
CASE
WHEN COMM IS NULL THEN '해당없음'
WHEN COMM = 0 THEN '수당 없음'
WHEN COMM > 0 THEN '추가 수당 :' || COMM
END AS NEW_COMM
FROM EMP;

-- EMP 테이블과 DEPT 테이블에서 공통으로 있는 부서번호 출력

SELECT DEPTNO
FROM EMP
INTERSECT 
SELECT DEPTNO
FROM DEPT;

SELECT EMP.EMPNO,EMP.ENAME, EMP.DEPTNO, DEPT.DNAME, DEPT.LOC
FROM EMP,DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY DEPT.DEPTNO,EMP.EMPNO;

SELECT E.EMPNO,E.ENAME, DEPT.DEPTNO, DEPT.DNAME, DEPT.LOC
FROM EMP E
JOIN DEPT ON E.DEPTNO = DEPT.DEPTNO
ORDER BY DEPT.DEPTNO,E.EMPNO;


-- 연도별 부서별 인원수

SELECT TO_CHAR(HIREDATE,'YYYY') AS HIRE_YEAR, DEPTNO, COUNT(*) AS CNT
FROM EMP
GROUP BY TO_CHAR(HIREDATE,'YYYY'), DEPTNO;

SELECT TO_CHAR(HIREDATE,'YYYY') AS HIRE_YEAR, DEPTNO, COUNT(*) AS CNT
FROM EMP
GROUP BY GROUPING SETS(TO_CHAR(HIREDATE,'YYYY'), DEPTNO);

-- 각 부서별, 직업별, 그룹화 된 부서 + 각 직업별, 전체 인원수, 급여 총액 (그룹화된 부서 : GROUP_DEPT, 그룹화된 직업 : GROUP_JOB)

SELECT DECODE(GROUPING(DEPTNO),1,'GROUP_DEPT', DEPTNO) AS DEPTNO,
       DECODE(GROUPING(JOB),1,'GROUP_JOB', JOB) AS JOB,
       COUNT(*),SUM(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB)
ORDER BY DEPTNO, JOB;

-- EMP 테이블에서 자신의 상급자 이름을 더해서 출력
-- EMP 테이블 2개 합쳐보기 EMPNO, ENAME
SELECT *
FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO;


SELECT E.ENAME, S.GRADE
FROM EMP E, SALGRADE S
WHERE E.SAL >= S.LOSAL AND E.SAL <= S.HISAL;

SELECT *
FROM SALGRADE;


SELECT *
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL;

SELECT *
FROM EMP E1
LEFT OUTER JOIN EMP E2 ON E1.MGR = E2.EMPNO;

SELECT *
FROM EMP E1
RIGHT OUTER JOIN EMP E2 ON E1.MGR = E2.EMPNO;


SELECT *
FROM EMP E1
NATURAL JOIN EMP E2;

SELECT E.EMPNO, E.ENAME, E.MGR, DEPTNO, D.DNAME, D.LOC
from EMP E 
NATURAL JOIN DEPT D;

SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
FROM EMP E NATURAL JOIN DEPT D
ORDER BY DEPTNO, E.EMPNO;

SELECT E.EMPNO, E.ENAME, E.JOB, E.MGR, E.HIREDATE, E.SAL, E.COMM, DEPTNO, D.DNAME, D.LOC
FROM EMP E 
JOIN DEPT D USING(DEPTNO)
ORDER BY DEPTNO, E.EMPNO; 

-- SALGRADE - HISAL을 받는 사람의 인원 수를 등급별로 출력해보기

SELECT S.GRADE ,COUNT(*) AS TOTAL_COUNT
FROM EMP E, SALGRADE S
WHERE E.SAL = S.HISAL 
GROUP BY S.GRADE;

SELECT S.GRADE ,COUNT(*) AS TOTAL_COUNT
FROM EMP E,SALGRADE S
WHERE E.SAL = S.HISAL;

SELECT *
FROM SALGRADE;

-- EMP테이블에서 DEPT 테이블과 공통된 'DEPTNO' 값을 가지지 않은 부서 이름과 위치를 출력
SELECT *
FROM EMP
RIGHT OUTER JOIN DEPT ON EMP.DEPTNO = DEPT.DEPTNO
WHERE EMP.DEPTNO IS NULL;

SELECT D.DEPTNO, D.DNAME, D.LOC
FROM DEPT D
LEFT OUTER JOIN EMP ON EMP.DEPTNO = D.DEPTNO
WHERE EMP.DEPTNO IS NULL;

--D.DEPTNO, D.DNAME, D.LOC
SELECT *
FROM DEPT;

-- EMP와 DEPT 결합해서 JOB이 MANAGER인 애들 출력해보기
SELECT *
FROM EMP E
INNER JOIN DEPT ON JOB = 'MANAGER' AND E.DEPTNO = DEPT.DEPTNO;

SELECT *
FROM EMP E, DEPT D
WHERE JOB = 'MANAGER' AND E.DEPTNO = D.DEPTNO;


SELECT *
FROM EMP
INTERSECT
SELECT *
FROM DEPT
WHERE JOB = 'MANAGER';

 ----------------------------------서브쿼리---------------------------------------------------------

-- 그룹별 최고 급여 직원 출력
SELECT * 
FROM EMP
WHERE SAL IN (SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO);

SELECT * 
FROM EMP
WHERE SAL = ANY(SELECT MAX(SAL) FROM EMP GROUP BY DEPTNO);

-- 30번 부서 사원들의 최대 급여보다 적은 급여를 받는 사람들 출력하기
SELECT *
FROM EMP
WHERE SAL < ANY(SELECT MAX(SAL) FROM EMP WHERE DEPTNO = 30);

SELECT E10.EMPNO, E10.ENAME, E10.DEPTNO, D.DNAME, D.LOC
FROM (SELECT* FROM EMP WHERE DEPTNO = 10 ) E10, (SELECT* FROM DEPT) D
WHERE E10.DEPTNO = D.DEPTNO;

WITH E10 AS (SELECT* FROM EMP WHERE DEPTNO = 10), D AS (SELECT* FROM DEPT)
SELECT E10.EMPNO, E10.ENAME, E10.DEPTNO, D.DNAME, D.LOC
FROM E10, D
WHERE E10.DEPTNO = D.DEPTNO;


-- EMP 테이블에서 가장 높은 급여를 받는 직원의 이름과 급여를 출력
SELECT ENAME, SAL
FROM EMP
WHERE SAL = (SELECT MAX(SAL) FROM EMP);

SELECT MAX(SAL) 
FROM EMP;

-- DEPT 테이블에서 각 부서별로 속한 직원의 수와 평균 급여를 출력
--WITH E10 AS (SELECT COUNT(*) FROM EMP GROUP BY DEPTNO ), D AS(SELECT* FROM DEPT)
WITH E10 AS (SELECT DEPTNO,COUNT(*), ROUND(AVG(SAL),0) FROM EMP GROUP BY DEPTNO)
SELECT *
FROM E10;

SELECT DEPTNO,(SELECT COUNT(*) FROM EMP WHERE DEPT.DEPTNO = EMP.DEPTNO GROUP BY DEPTNO) AS AVG_COUNT,
              (SELECT ROUND(AVG(SAL),0) FROM EMP WHERE DEPT.DEPTNO = EMP.DEPTNO GROUP BY DEPTNO) AS AVG_SAL
FROM DEPT;

SELECT COUNT(*) 
FROM EMP 
GROUP BY DEPTNO;

SELECT DEPTNO,COUNT(*), AVG(SAL)
FROM EMP
GROUP BY DEPTNO
ORDER BY DEPTNO;

-- EMP 테이블에서 각 직원의 이름과 급여를 조회하고, 해당 직원의 급여가 부서 평균 급여보다 높은 경우에만 출력.
WITH E10 AS (SELECT* FROM EMP WHERE SAL > (SELECT AVG(SAL) FROM EMP))
SELECT*
FROM E10;

SELECT* 
FROM EMP
WHERE SAL > (SELECT AVG(SAL) FROM EMP);

SELECT ENAME, SAL
FROM EMP E1, (SELECT AVG(SAL) AS AVG_SAL, DEPTNO FROM EMP GROUP BY DEPTNO) E2
WHERE E1.SAL > E2.AVG_SAL AND E1.DEPTNO = E2.DEPTNO;

-- EMP 테이블에서 부서 번호가 10인 부서에 속한 직원들 중에서 급여가 3000 이상인 직원의 이름과 급여를 출력
SELECT* 
FROM EMP 
WHERE DEPTNO = 10 AND SAL>=3000;

WITH E10 AS(SELECT ENAME, SAL FROM EMP WHERE DEPTNO = 10 AND SAL>=3000)
SELECT* 
FROM E10;

SELECT DEPTNO, COUNT(*) AS EMPCNT, MAX(SAL) AS MAXSAL 
FROM EMP 
GROUP BY DEPTNO
HAVING DEPTNO = 10 AND MAX(SAL)>=3000;

SELECT ENAME, SAL 
FROM (SELECT ENAME, SAL FROM EMP WHERE DEPTNO = 10 AND SAL>=3000);
------------------비교 연산-----------------------------
SELECT ENAME, SAL
FROM EMP E1
WHERE(E1.EMPNO, E1.DEPTNO) = (SELECT E2.EMPNO, E2.DEPTNO FROM EMP E2 WHERE E2.DEPTNO = 10 AND SAL=5000);

SELECT E2.ENAME, E2.SAL FROM EMP E2 WHERE E2.DEPTNO = 10 AND SAL = 5000;


-- 1.각 직원의 이름과 부서 이름을 출력. (부서 번호 대신 부서 이름)
SELECT ENAME, DEPTNO,
CASE
WHEN DEPTNO = 10 THEN '관리자'
WHEN DEPTNO = 20 THEN '점원'
WHEN DEPTNO = 30 THEN '세일즈맨'
END AS NAME
FROM EMP;

SELECT *
FROM DEPT;

SELECT ENAME, DEPT.DEPTNO, DNAME
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO;

WITH DEPT_DATA AS(SELECT DEPTNO, DNAME FROM DEPT)
SELECT E.ENAME, D.DNAME
FROM EMP E
JOIN DEPT_DATA D ON E.DEPTNO = D.DEPTNO;

-- 2. 각 직원의 이름과 해당 직원의 급여를 조회하되, 급여가 부서 평균 급여보다 높은 경우에는 "상위"라고 표시하고 그 외에는 "일반"이라고 출력
SELECT ENAME, SAL
FROM EMP
WHERE SAL > (SELECT AVG(SAL) FROM EMP);

SELECT DEPTNO, ROUND(AVG(SAL)) 
FROM EMP 
GROUP BY DEPTNO
ORDER BY DEPTNO;


SELECT ENAME, SAL,DEPTNO,
CASE
WHEN SAL >= (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 10) THEN '상위'
WHEN SAL >= (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 20) THEN '상위'
WHEN SAL >= (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) THEN '상위'
WHEN SAL <= (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 10) THEN '일반'
WHEN SAL <= (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 20) THEN '일반'
WHEN SAL <= (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30) THEN '일반'
END AS NAME
FROM EMP;

SELECT E2.ENAME, E2.SAL,
CASE
WHEN E2.SAL > E1.AVGSAL THEN '상위'
ELSE '일반'
END AS SAL_GRADE
FROM EMP E2, (SELECT ROUND(AVG(SAL)) AS AVGSAL, DEPTNO FROM EMP GROUP BY DEPTNO) E1
WHERE E2.DEPTNO = E1.DEPTNO;

SELECT E.ENAME, E.SAL,
CASE
WHEN E.SAL > (SELECT AVG(SAL) FROM EMP WHERE DEPTNO = EMP.DEPTNO) THEN '상위'
ELSE '일반'
END AS SAL_GRADE
FROM EMP E;

SELECT *
FROM EMP;
-- 3. 각 부서별로 속한 직원의 수와 평균 급여를 조회하되, 급여가 해당 부서의 평균 급여보다 높은 직원의 이름과 급여를 함께 출력(평균 급여 내림차순으로 정렬)

SELECT DEPTNO, COUNT(*) AS COUNT, SAL
FROM EMP
WHERE SAL > (SELECT COUNT(*) FROM EMP GROUP BY DEPTNO)
GROUP BY DEPTNO;

SELECT DEPTNO,SAL
FROM EMP
WHERE SAL > (SELECT AVG(SAL)FROM EMP)
ORDER BY SAL;
------------------------------------------------------------------------------------------
SELECT E1.ENAME, E1.SAL, E1.DEPTNO, COUNT(*), FLOOR(AVG(E1.SAL)) AS AVG_SAL
FROM EMP E1
WHERE E1.SAL >= (SELECT AVG(SAL) FROM EMP E2 WHERE E1.DEPTNO = E2.DEPTNO GROUP BY E2.DEPTNO)
GROUP BY E1.DEPTNO
ORDER BY AVG_SAL DESC;

SELECT E1.DEPTNO, COUNT(*), FLOOR(AVG(E1.SAL))
FROM EMP E1
GROUP BY E1.DEPTNO;
--------------------------------------------------------------------------------------------------
WITH A AS(SELECT DEPTNO, COUNT(*) AS EMP_COUNT, ROUND(AVG(SAL)) AS AVER_SAL FROM EMP GROUP BY DEPTNO),
     B AS (SELECT E1.ENAME, E1.SAL, E1.DEPTNO
           FROM EMP E1, (SELECT ROUND(AVG(SAL)) AS AVG_SAL, DEPTNO FROM EMP GROUP BY DEPTNO) E2
           WHERE E1.SAL > E2.AVG_SAL AND E1.DEPTNO = E2.DEPTNO)
SELECT A.DEPTNO, A.EMP_COUNT, A.AVER_SAL, B.ENAME, B.SAL
FROM A, B
WHERE A.DEPTNO = B.DEPTNO
ORDER BY A.AVER_SAL DESC;
---------------------------------------------------------------------------------------------------
WITH DEPT_SUM AS (
    SELECT DEPTNO, COUNT(*) AS EMP_CNT, AVG(SAL) AS AVG_SAL
    FROM EMP
    GROUP BY DEPTNO
)

SELECT E.ENAME, E.SAL
FROM EMP E
JOIN DEPT_SUM DS ON E.DEPTNO = DS.DEPTNO
WHERE E.SAL > DS.AVG_SAL
ORDER BY DS.AVG_SAL DESC;

SELECT COUNT(*)
FROM EMP
GROUP BY DEPTNO;

-- 4. 각 직원의 이름과 보너스를 조회하되, 보너스가 없는 직원들 중에서 가장 급여가 높은 직원의 이름과 급여를 출력
SELECT  ENAME, SAL
FROM EMP
WHERE COMM IS NULL AND SAL = (SELECT MAX(SAL)FROM EMP);

SELECT  ENAME, SAL
FROM EMP
WHERE COMM IS NULL AND SAL = (SELECT MAX(SAL)FROM EMP WHERE COMM IS NULL);






